#!usr/bin/python
# -*- coding=utf-8 -*-

#this py is used to collect seats information in Xiamen University Library
__author__ = 'smartjinyu'
import requests
from bs4 import BeautifulSoup
import sqlite3
import time

'''
# Old schema of database, has been deprecated since DEC 16,2016
# The database generated by this method are named seatState_old.db in my GitHub Repository, which covered data from OCT 14,2016 to DEC 15,2016
def parse():
    url = 'http://library.xmu.edu.cn/portal/seatmanage.asp'
    try:
        session = requests.get(url)
        soup = BeautifulSoup(session.content, 'lxml')
        seatList_soup = soup.find('ul', attrs={'class', 'SeatRoom'})
        for room in seatList_soup.find_all('li'):
            # room = <li class="rb close" id="roomstate1"><p class="RoomName">书库1楼</p><p><span class="st" id="st1">0</span>/<span class="sa" id="sa1">13</span></p></li>
            curTime = time.time()
            tableName = room['id']
            roomName = room.find('p',attrs={'class', 'RoomName'}).getText()
            used = int(room.find('span',attrs={'class', 'st'}).getText())
            total = int(room.find('span',attrs={'class', 'sa'}).getText())
            conn = sqlite3.connect('seatState.db')
            cursor = conn.cursor()
            cursor.execute('create table if not exists %s (time float primary key, name char(20),used int DEFAULT 0,total int)' % tableName)
            cursor.execute('insert into %s (time,name,used,total) values (\'%f\',\'%s\',\'%d\',\'%d\')' %(tableName,curTime,roomName,used,total))
            cursor.close()
            conn.commit()
            conn.close()
    except requests.exceptions.RequestException:
        print requests.exceptions
'''

# Nex schema of database, has been deployed since DEC 16,2016
# The database generated by this method are named libseat.db in my GitHub Repository, which covered data from DEC 14,2016
def parse():
    url = 'http://library.xmu.edu.cn/portal/seatmanage.asp'
    try:
        session = requests.get(url)
        soup = BeautifulSoup(session.content, 'lxml')
        seatList_soup = soup.find('ul', attrs={'class', 'SeatRoom'})
        curTime = time.time()
        conn = sqlite3.connect('libseat.db')
        cursor = conn.cursor()
        cursor.execute('''create table if not exists roomstate(time float primary key,
                       name1 char(20),used1 int DEFAULT 0,total1 int DEFAULT 0,
                       name2 char(20),used2 int DEFAULT 0,total2 int DEFAULT 0,
                       name3 char(20),used3 int DEFAULT 0,total3 int DEFAULT 0,
                       name4 char(20),used4 int DEFAULT 0,total4 int DEFAULT 0,
                       name5 char(20),used5 int DEFAULT 0,total5 int DEFAULT 0,
                       name6 char(20),used6 int DEFAULT 0,total6 int DEFAULT 0,
                       name7 char(20),used7 int DEFAULT 0,total7 int DEFAULT 0,
                       name8 char(20),used8 int DEFAULT 0,total8 int DEFAULT 0,
                       name9 char(20),used9 int DEFAULT 0,total9 int DEFAULT 0,
                       name10 char(20),used10 int DEFAULT 0,total10 int DEFAULT 0,
                       name11 char(20),used11 int DEFAULT 0,total11 int DEFAULT 0,
                       name12 char(20),used12 int DEFAULT 0,total12 int DEFAULT 0,
                       name13 char(20),used13 int DEFAULT 0,total13 int DEFAULT 0,
                       name14 char(20),used14 int DEFAULT 0,total14 int DEFAULT 0,
                       name15 char(20),used15 int DEFAULT 0,total15 int DEFAULT 0)''')
        i = 1
        for room in seatList_soup.find_all('li'):
            # room = <li class="rb close" id="roomstate1"><p class="RoomName">书库1楼</p><p><span class="st" id="st1">0</span>/<span class="sa" id="sa1">13</span></p></li>
            roomName = room.find('p',attrs={'class', 'RoomName'}).getText()
            used = int(room.find('span',attrs={'class', 'st'}).getText())
            total = int(room.find('span',attrs={'class', 'sa'}).getText())
            if(i==1):
                cursor.execute('insert into roomstate (time,name1,used1,total1) values (\'%f\',\'%s\',\'%d\',\'%d\')' % (curTime, roomName, used, total))
            else:
                cursor.execute('''UPDATE roomstate set \'%s\'=\'%s\',\'%s\'=\'%d\',\'%s\'=\'%d\' WHERE time = \'%f\''''
                               %('name'+str(i),roomName, 'used'+str(i),  used, 'total'+str(i), total, curTime))
            i=i+1
            if(i > 15):
                break

        cursor.close()
        conn.commit()
        conn.close()
    except requests.exceptions.RequestException:
        print requests.exceptions


def main():
    parse()

if __name__ == '__main__':
    main()
